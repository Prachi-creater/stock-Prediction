[{"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\index.js":"1","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\App.js":"2","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\reportWebVitals.js":"3","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Signin.jsx":"4","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Signup.jsx":"5","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Services.jsx":"6","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Home.jsx":"7","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\AboutPage.jsx":"8","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\reuseableComponent\\Appbar.jsx":"9"},{"size":500,"mtime":499162500000,"results":"10","hashOfConfig":"11"},{"size":920,"mtime":1619843462502,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":499162500000,"results":"13","hashOfConfig":"11"},{"size":3342,"mtime":1619762614534,"results":"14","hashOfConfig":"11"},{"size":4750,"mtime":1619762654142,"results":"15","hashOfConfig":"11"},{"size":235,"mtime":1619785959444,"results":"16","hashOfConfig":"11"},{"size":250,"mtime":1620224641366,"results":"17","hashOfConfig":"11"},{"size":375,"mtime":1619785824168,"results":"18","hashOfConfig":"11"},{"size":4186,"mtime":1620224352639,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1ebk3gu",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\index.js",[],["41","42"],"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\App.js",["43"],"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\reportWebVitals.js",[],"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Signin.jsx",["44"],"import React from 'react'\r\nimport '../pages/style.css';\r\nimport Image from '../Images/stock_1.jpg';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff'\r\nimport Button from '@material-ui/core/Button';\r\nimport { useFormik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '45ch',\r\n\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n\r\n  const schema = yup.object().shape({\r\n    email: yup.string().required(\"This field is required\"),\r\n    password: yup.string().required(\"This field is required\").min(8, \"Password must be atleast 8 character\"),\r\n\r\n  })\r\n\r\n  const formik = useFormik(\r\n    {\r\n      initialValues: {\r\n        email: \"\",\r\n        password: \"\"\r\n      },\r\n      validationSchema: schema,\r\n      onSubmit: (data) => {\r\n        console.log(data)\r\n      }\r\n    }\r\n  )\r\n\r\n  return (\r\n    <div className=\"parent-div\">\r\n\r\n      <div className=\"outer-div\">\r\n\r\n\r\n        <div className=\"image\">\r\n          <img src={Image} width='700px' height='600px' />\r\n        </div>\r\n\r\n\r\n        <div className=\"login-div\">\r\n\r\n          <center><AccountCircleIcon className=\"logo\" /></center>\r\n          <center><h1>Welcome Back</h1></center>\r\n\r\n          <center><form onSubmit={formik.handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\r\n            <TextField\r\n              id=\"email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              InputProps={{ endAdornment: <PersonIcon className=\"icon1\" /> }}\r\n              name=\"email\"\r\n              values={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              error={(formik.touched.email && formik.errors.email) ? true : false}\r\n              helperText={(formik.touched.email && formik.errors.email) ? formik.errors.email : \"\"}\r\n            /><br /><br />\r\n\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              variant=\"outlined\"\r\n              InputProps={{ endAdornment: < VisibilityOffIcon className=\"icon2\" /> }}\r\n              name=\"password\"\r\n              values={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              error={(formik.touched.password && formik.errors.password) ? true : false}\r\n              helperText={(formik.touched.password && formik.errors.password) ? formik.errors.password : \"\"}\r\n            /><br /><br />\r\n\r\n\r\n            <Button variant=\"contained\" color=\"primary\" id=\"button\" type=\"submit\">\r\n              login now\r\n            </Button>\r\n\r\n            <Link to='/Signup' className=\"link\"><Button variant=\"contained\" color=\"primary\" id=\"button2\" type=\"submit\">\r\n              create account\r\n            </Button></Link>\r\n\r\n          </form>\r\n          </center>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Signup.jsx",["45"],"import React from 'react'\r\nimport '../pages/style.css';\r\nimport Image from '../Images/stock_1.jpg';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport LockOpenIcon from '@material-ui/icons/LockOpen';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport VisibilityOffIcon from '@material-ui/icons/VisibilityOff'\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport Button from '@material-ui/core/Button';\r\nimport TrendingFlatIcon from '@material-ui/icons/TrendingFlat';\r\nimport { useFormik } from 'formik'\r\nimport * as yup from 'yup'\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n      width: '45ch',\r\n\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function SignIn() {\r\n  const classes = useStyles();\r\n\r\n  const schema = yup.object().shape({\r\n    name: yup.string().required(\"This field is required\"),\r\n    phone: yup.string().required(\"This field is required\"),\r\n    email: yup.string().required(\"This field is required\"),\r\n    password: yup.string().required(\"This field is required\").min(8, \"Password must be atleast 8 character\"),\r\n\r\n  })\r\n\r\n  const formik = useFormik(\r\n    {\r\n      initialValues: {\r\n        name:\"\",\r\n        phone:\"\",\r\n        email: \"\",\r\n        password: \"\"\r\n      },\r\n      validationSchema: schema,\r\n      onSubmit: (data) => {\r\n        console.log(data)\r\n      }\r\n    }\r\n  )\r\n\r\n  return (\r\n    <div className=\"parent-div\">\r\n\r\n      <div className=\"outer-div\">\r\n\r\n\r\n        <div className=\"image\">\r\n          <img src={Image} width='700px' height='600px' />\r\n        </div>\r\n\r\n\r\n        <div className=\"login-div\">\r\n\r\n          <center><LockOpenIcon className=\"logo\" /></center>\r\n          <center><h1>WELCOME</h1></center>\r\n\r\n          <center><form onSubmit={formik.handleSubmit} className={classes.root} noValidate autoComplete=\"off\">\r\n          <TextField\r\n              id=\"name\"\r\n              label=\"UserName\"\r\n              variant=\"outlined\"\r\n              InputProps={{ endAdornment: <PersonIcon className=\"icon1\" /> }}\r\n              name=\"name\"\r\n              values={formik.values.name}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              error={(formik.touched.email && formik.errors.name) ? true : false}\r\n              helperText={(formik.touched.email && formik.errors.name) ? formik.errors.name: \"\"}\r\n            /><br /><br />\r\n\r\n            <TextField\r\n              id=\"phone\"\r\n              label=\"Phone Number\"\r\n              variant=\"outlined\"\r\n              InputProps={{ endAdornment: < CallIcon className=\"icon1\" /> }}\r\n              name=\"phone\"\r\n              values={formik.values.phone}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              error={(formik.touched.email && formik.errors.phone) ? true : false}\r\n              helperText={(formik.touched.email && formik.errors.phone) ? formik.errors.phone: \"\"}\r\n            /><br /><br />\r\n\r\n            <TextField\r\n              id=\"email\"\r\n              label=\"Email\"\r\n              variant=\"outlined\"\r\n              InputProps={{ endAdornment: <PersonIcon className=\"icon1\" /> }}\r\n              name=\"email\"\r\n              values={formik.values.email}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              error={(formik.touched.email && formik.errors.email) ? true : false}\r\n              helperText={(formik.touched.email && formik.errors.email) ? formik.errors.email : \"\"}\r\n            /><br /><br />\r\n\r\n            <TextField\r\n              id=\"password\"\r\n              label=\"Password\"\r\n              type=\"password\"\r\n              autoComplete=\"current-password\"\r\n              variant=\"outlined\"\r\n              InputProps={{ endAdornment: < VisibilityOffIcon className=\"icon2\" /> }}\r\n              name=\"password\"\r\n              values={formik.values.password}\r\n              onChange={formik.handleChange}\r\n              onBlur={formik.handleBlur}\r\n              error={(formik.touched.password && formik.errors.password) ? true : false}\r\n              helperText={(formik.touched.password && formik.errors.password) ? formik.errors.password : \"\"}\r\n            /><br /><br />\r\n\r\n\r\n            <Button variant=\"contained\" color=\"primary\" id=\"button\" type=\"submit\">\r\n              Register\r\n            </Button>\r\n            \r\n            <Link to='/Signin' className=\"link\"><Button variant=\"contained\" color=\"primary\" id=\"button3\" type=\"submit\">\r\n              SignIn <TrendingFlatIcon/>\r\n            </Button></Link>\r\n\r\n          </form>\r\n          </center>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Services.jsx",[],"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\Home.jsx",["46"],"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\pages\\AboutPage.jsx",[],"C:\\Users\\pra12\\Documents\\GitHub\\stock-Prediction\\src\\reuseableComponent\\Appbar.jsx",["47"],{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","severity":1,"message":"53","line":7,"column":47,"nodeType":"54","messageId":"55","endLine":7,"endColumn":51},{"ruleId":"56","severity":1,"message":"57","line":53,"column":11,"nodeType":"58","endLine":53,"endColumn":59},{"ruleId":"56","severity":1,"message":"57","line":59,"column":11,"nodeType":"58","endLine":59,"endColumn":59},{"ruleId":"52","severity":1,"message":"59","line":2,"column":8,"nodeType":"54","messageId":"55","endLine":2,"endColumn":14},{"ruleId":"52","severity":1,"message":"60","line":64,"column":9,"nodeType":"54","messageId":"55","endLine":64,"endColumn":30},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Appbar' is defined but never used.","'handleProfileMenuOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]